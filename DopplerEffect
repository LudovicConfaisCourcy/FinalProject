import java.io.File;
import javafx.animation.ScaleTransition;
import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.VBox;
import javafx.scene.layout.HBox;
import javafx.geometry.Pos;
import javafx.geometry.Insets;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Slider;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Hyperlink;
import javafx.scene.layout.BorderPane;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.Pane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.util.Duration;

public class DopplerEffect extends Application {
    public static void main(String[] args) {
        launch(args);
    }    
        double vSource;
        double actualFrequency;
        double vSound;
        double vObserver;
        double observedFrequency;
        private double FIVE_SEC = 5000.0;
        private double START_SCALE = 1.0;
        private double END_SCALE = 2.0;
       @Override
    public void start(Stage primaryStage) {

    Text text = new Text("Welcome to the Doppler Effect Application");
    ScaleTransition strans = new ScaleTransition(new Duration(FIVE_SEC), text);
    strans.setFromX(START_SCALE);
    strans.setFromY(START_SCALE);
    strans.setToX(END_SCALE);
    strans.setToY(END_SCALE);

    VBox vbox1 = new VBox(20); // Set spacing between nodes
    vbox1.setAlignment(Pos.TOP_CENTER);
    vbox1.setPadding(new Insets(20)); // Add padding around the VBox
    vbox1.getChildren().add(text);

    Button button1 = new Button("Show the calculator");
    button1.setOnAction(event -> showSecondWindow());

    Button button2 = new Button("Show the animation");
    button2.setOnAction(event -> showThirdWindow());

    VBox vbox2 = new VBox(20); // Set spacing between nodes
    vbox2.setAlignment(Pos.CENTER);
    vbox2.setPadding(new Insets(20)); // Add padding around the VBox
    vbox2.getChildren().addAll(button1, button2);

    Button button3 = new Button("Show more information");
    button3.setOnAction(event -> showFourthWindow());

    Button closeButton = new Button("Close the application");
    closeButton.setOnAction(event -> {
        primaryStage.close();
    });

    VBox vbox3 = new VBox(20); // Set spacing between nodes
    vbox3.setAlignment(Pos.CENTER);
    vbox3.setPadding(new Insets(20)); // Add padding around the VBox
    vbox3.getChildren().addAll(button3, closeButton);

    HBox hbox = new HBox(20, vbox2, vbox3);
    hbox.setAlignment(Pos.CENTER);

    VBox mainVbox = new VBox(20); // Set spacing between nodes
    mainVbox.setAlignment(Pos.TOP_CENTER);
    mainVbox.setPadding(new Insets(20)); // Add padding around the VBox
    mainVbox.getChildren().addAll(vbox1, hbox);

    Scene scene = new Scene(mainVbox, 500, 200); // Set preferred window size
    primaryStage.setScene(scene);
    primaryStage.setTitle("The DopplerEffect Project");
    primaryStage.show();
    strans.play();

    }   
    
    public void showSecondWindow(){
                
        final double MIN = 0.0, MAX = 100.0 , INITIAL = 0.0;
        final double MAJOR_TICK_UNIT = 20.0;
        final int MINOR_TICK_COUNT = 5;
        final double SLIDER_WIDTH = 300.0;
        final double LABEL_WIDTH = 50.0;
        final double SPACING = 10.0;
        
        Button calcButton = new Button("Calculate");
        ComboBox<String> cbox = new ComboBox();
        cbox.getItems().addAll("Observed Frequency","Actual Frequency","Observer Velocity","Source Velocity");
        cbox.getSelectionModel().selectFirst();
        
        Label ofDescriptor = new Label("Observed Frequency: ");
        Label vSoundDescriptor = new Label("Sound Velocity: ");
        Label afDescriptor = new Label("Actual Frequency: ");
        Label ovDescriptor = new Label("Observer Velocity: ");        
        Label svDescriptor = new Label("Source Velocity: ");
        
        TextField ofTextField = new TextField();
        ofTextField.setStyle("-fx-border-style: solid;" + "-fxalignment: center");
        ofTextField.setPrefWidth(LABEL_WIDTH);
     
        TextField afTextField = new TextField();
        afTextField.setStyle("-fx-border-style: solid;" + "-fxalignment: center");
        afTextField.setPrefWidth(LABEL_WIDTH);
        
        TextField svTextField = new TextField();
        svTextField.setStyle("-fx-border-style: solid;" + "-fxalignment: center");
        svTextField.setPrefWidth(LABEL_WIDTH);
        
        TextField ovTextField = new TextField();
        ovTextField.setStyle("-fx-border-style: solid;" + "-fxalignment: center");
        ovTextField.setPrefWidth(LABEL_WIDTH);
    
        TextField vSoundTextField = new TextField();
        vSoundTextField.setStyle("-fx-border-style: solid;" + "-fxalignment: center");
        vSoundTextField.setPrefWidth(LABEL_WIDTH);
        
        RadioButton ovRadio = new RadioButton();
        RadioButton svRadio = new RadioButton();
        RadioButton ofRadio = new RadioButton();
        RadioButton afRadio = new RadioButton();
        RadioButton vSoundRadio = new RadioButton();
        
        ToggleGroup radioGroup = new ToggleGroup();
        ovRadio.setToggleGroup(radioGroup);
        ofRadio.setToggleGroup(radioGroup);
        svRadio.setToggleGroup(radioGroup);
        afRadio.setToggleGroup(radioGroup);
        vSoundRadio.setToggleGroup(radioGroup);
        
        HBox ofHBox = new HBox(ofRadio,ofDescriptor, ofTextField);
        ofHBox.setAlignment(Pos.CENTER);
        HBox afHBox = new HBox(afRadio,afDescriptor,afTextField);
        afHBox.setAlignment(Pos.CENTER);
        HBox ovHBox = new HBox(ovRadio,ovDescriptor, ovTextField);
        ovHBox.setAlignment(Pos.CENTER);
        HBox svHBox = new HBox(svRadio,svDescriptor,svTextField);
        svHBox.setAlignment(Pos.CENTER);
        HBox vSoundHBox = new HBox(vSoundRadio,vSoundDescriptor, vSoundTextField);
        vSoundHBox.setAlignment(Pos.CENTER);
        
        Slider slider = new Slider(MIN, MAX, INITIAL);
        slider.setShowTickMarks(true);
        slider.setMajorTickUnit(MAJOR_TICK_UNIT);
        slider.setMinorTickCount(MINOR_TICK_COUNT);
        slider.setShowTickLabels(true);
        slider.setSnapToTicks(true);
        slider.setPrefWidth(SLIDER_WIDTH);
        


    BorderPane borderPane = new BorderPane();
    MenuBar menuBar = new MenuBar();
    Menu fileMenu = new Menu("File");
    MenuItem exitItem = new MenuItem("Exit");
    fileMenu.getItems().add(exitItem);

    exitItem.setOnAction(event -> {
        Stage stage = (Stage) borderPane.getScene().getWindow();
        stage.close();
    });
           menuBar.getMenus().addAll(fileMenu);
           borderPane.setTop(menuBar);
        
        calcButton.setOnAction(event -> {
           String choice = cbox.getValue();
           
           switch (choice){
            
            case "Observed Frequency":
                vSound = Double.parseDouble(vSoundTextField.getText());
                vSource = Double.parseDouble(svTextField.getText());
                vObserver = Double.parseDouble(ovTextField.getText());
                actualFrequency = Double.parseDouble(afTextField.getText());
                observedFrequency = actualFrequency * (vSound + vObserver)/(vSound + vSource);
                ofTextField.setText(String.format("%.1f", observedFrequency));
                break;
            
            case "Actual Frequency":
                vSound = Double.parseDouble(vSoundTextField.getText());
                vSource = Double.parseDouble(svTextField.getText());
                vObserver = Double.parseDouble(ovTextField.getText());
                observedFrequency = Double.parseDouble(ofTextField.getText());
                actualFrequency = observedFrequency *(vSound + vSource)/(vSound + vObserver);
                afTextField.setText(String.format("%.1f", actualFrequency));
                break;
            
            case "Source Velocity":
                vSound = Double.parseDouble(vSoundTextField.getText());
                actualFrequency  = Double.parseDouble(afTextField.getText());
                vObserver = Double.parseDouble(ovTextField.getText());
                observedFrequency = Double.parseDouble(ofTextField.getText());
                vSource = (actualFrequency *(vObserver + vSound)/observedFrequency)- vSound;
                svTextField.setText(String.format("%.1f", vSource));
                break;
            
            case "Observer Velocity":
                vSound = Double.parseDouble(vSoundTextField.getText());
                vSource = Double.parseDouble(svTextField.getText());
                actualFrequency = Double.parseDouble(afTextField.getText());
                observedFrequency = Double.parseDouble(ofTextField.getText());
                vObserver = (observedFrequency *(vSound + vSource)/actualFrequency)- vSource;
                ovTextField.setText(String.format("%.1f", vObserver));
                break;


        }
        });
        
            slider.valueProperty().addListener((observable, oldvalue, newvalue)->{
                if (radioGroup.getSelectedToggle() == ovRadio) {                    
                vObserver = slider.getValue();         
                ovTextField.setText(String.format("%.1f", vObserver));
            }
                else if (radioGroup.getSelectedToggle() == svRadio) {                    
                vSource = slider.getValue();         
                svTextField.setText(String.format("%.1f", vSource));
            }
                else if (radioGroup.getSelectedToggle() == afRadio) {                    
                actualFrequency = slider.getValue();         
                afTextField.setText(String.format("%.1f", actualFrequency));
            }
                else if (radioGroup.getSelectedToggle() == ofRadio) {                    
                observedFrequency = slider.getValue();         
                ofTextField.setText(String.format("%.1f", observedFrequency));
            }
                else if (radioGroup.getSelectedToggle() == vSoundRadio) {                    
                vSound = slider.getValue();         
                vSoundTextField.setText(String.format("%.1f", vSound));
            }

         });
        
        
        VBox mainVbox = new VBox(10, cbox,ofHBox, afHBox, ovHBox,svHBox, vSoundHBox, slider, calcButton);
        mainVbox.setAlignment(Pos.CENTER);
        mainVbox.setPadding(new Insets(SPACING));       
        
        
    borderPane.setCenter(mainVbox);
    Scene secondScene = new Scene(borderPane);
    Stage secondStage = new Stage();
    secondStage.setScene(secondScene);
    secondStage.showAndWait();
    secondStage.setTitle("Calculator Page");
    }
    
   public void showThirdWindow() {
    final double WIDTH = 640.0, HEIGHT = 480.0;
    File videoFile = new File("C:\\Users\\17171397\\Documents\\dopplereffectvideo.mp4");
    Media media = new Media(videoFile.toURI().toString());
    MediaPlayer player = new MediaPlayer(media);
    player.setOnEndOfMedia(() -> {
        player.stop();
    });
    MediaView view = new MediaView(player);
    view.setFitWidth(WIDTH);
    view.setFitHeight(HEIGHT);
    Button playButton = new Button("Play");
    Button pauseButton = new Button("Pause");
    Button stopButton = new Button("Stop");

    playButton.setOnAction(event -> {
        player.play();
    });

    pauseButton.setOnAction(event -> {
        player.pause();
    });

    stopButton.setOnAction(event -> {
        player.stop();
    });

    HBox hbox = new HBox(10, playButton, pauseButton, stopButton);
    hbox.setAlignment(Pos.CENTER);
    hbox.setPadding(new Insets(10));

    BorderPane borderPane = new BorderPane();
    borderPane.setCenter(view);
    borderPane.setBottom(hbox);

    Stage stage = new Stage();
    stage.setTitle("Animation Page");
    Scene scene = new Scene(borderPane);
    stage.setScene(scene);
    stage.show();
}
   
   public void showFourthWindow() {
    final double SCENE_WIDTH = 800.0;
    final double SCENE_HEIGHT = 200.0;
    final double X1 = 30.0, Y1 = 100;
    final double X2 = 30.0, Y2 = 130.0;
    final double X3 = 30.0, Y3 = 150.0;
    final double FONT_SIZE = 38;
    final double SCALE_HALF = 0.30;
    final double SCALE_QTR = 0.25;

    Stage fourthStage = new Stage(); // Create a new stage for the fourth window

    Text text1 = new Text(X1, Y1, "Information");
    text1.setFont(new Font("SansSerif", FONT_SIZE));
    

    Text text2 = new Text(X2, Y2, "Our project offers an innovative JavaFX program designed to solve a fundamental problem in wave physics, which is calculating the velocity ");
    text2.setFont(new Font("SansSerif", FONT_SIZE));
    text2.setScaleX(SCALE_HALF);
    text2.setScaleY(SCALE_HALF);
    text2.setTranslateY(15); // Translate the second text by 30 units vertically
    
    Text text21 = new Text(X2, Y2, "or frequency of a wave when a source and/or observer is in motion, taking into account the Doppler effect.");
    text21.setFont(new Font("SansSerif", FONT_SIZE));
    text21.setScaleX(SCALE_HALF);
    text21.setScaleY(SCALE_HALF);
    text21.setTranslateY(-15); // Translate the second text by 30 units vertically
    
    String url = "https://www.youtube.com/watch?v=h4OnBYrbCjY&ab_channel=AltShiftX"; // Replace with your desired URL

    Hyperlink hyperlink = new Hyperlink("Visit Animation Source");
    hyperlink.setOnAction(e -> getHostServices().showDocument(url));
    
    
    Text text3 = new Text(X3, Y3, "Team Members : Ludovic Confais Courcy,Amine Ait Yakoub,Enrico Sombini");
    text3.setFont(new Font("SansSerif", FONT_SIZE));
    text3.setScaleX(SCALE_QTR);
    text3.setScaleY(SCALE_QTR);
    text3.setTranslateY(10); // Translate the third text by 60 units vertically

    
    VBox vbox = new VBox(text1, text2, text21,hyperlink, text3); 
    vbox.setAlignment(Pos.CENTER);
    //Pane pane = new Pane(text1, text2, text3);
    Scene scene = new Scene(vbox, SCENE_WIDTH, SCENE_HEIGHT);

    fourthStage.setTitle("Information Page");
    fourthStage.setScene(scene);
    fourthStage.show();
}
   
   


   
   
   
   
   
}
