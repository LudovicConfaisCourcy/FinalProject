import java.io.File;
import java.util.Optional;
import javafx.animation.ScaleTransition;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.VBox;
import javafx.scene.layout.HBox;
import javafx.geometry.Pos;
import javafx.geometry.Insets;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.Slider;
import javafx.scene.control.TextField;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Hyperlink;
import javafx.scene.layout.BorderPane;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.util.Duration;

public class DopplerEffect1 extends Application {
    public static void main(String[] args) {
        launch(args);
    }    
        double vSource;
        double actualFrequency;
        double vSound;
        double vObserver;
        double observedFrequency; 
        double temperature;
        double vSound1;
        double result;
        private double FIVE_SEC = 5000.0;
        private double START_SCALE = 1.0;
        private double END_SCALE = 2.0;
       @Override
    public void start(Stage primaryStage) {

    Text text = new Text("Welcome to the Doppler Effect Application");
    ScaleTransition strans = new ScaleTransition(new Duration(FIVE_SEC), text);
    strans.setFromX(START_SCALE);
    strans.setFromY(START_SCALE);
    strans.setToX(END_SCALE);
    strans.setToY(END_SCALE);

    VBox vbox1 = new VBox(20); // Set spacing between nodes
    vbox1.setAlignment(Pos.TOP_CENTER);
    vbox1.setPadding(new Insets(20)); // Add padding around the VBox
    vbox1.getChildren().add(text);

    
    Image image = new Image("file:dopplereffectimage.png");  
    ImageView imageV = new ImageView(image);
    imageV.setFitWidth(300);
    imageV.setPreserveRatio(true);
    
    
    
    Button button1 = new Button("Show the Calculators");
    button1.setOnAction(event -> showCalcWindow());

    
    Button button2 = new Button("Show the Animation");
    button2.setOnAction(event -> showAnimationWindow());

    VBox vbox2 = new VBox(20); // Set spacing between nodes
    vbox2.setAlignment(Pos.CENTER);
    vbox2.setPadding(new Insets(20)); // Add padding around the VBox
    vbox2.getChildren().addAll(button1, button2);

    Button button3 = new Button("Show more Information");
    button3.setOnAction(event -> showInfoWindow());

    Button closeButton = new Button("Close the Application");
    closeButton.setOnAction(event -> {
        Label resultLabel =new Label();
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setContentText("Are You Sure You Want to Exit?");
            Optional<ButtonType> result = alert.showAndWait();
            if(result.get() == ButtonType.OK)
                primaryStage.close();
  
    });

    VBox vbox3 = new VBox(20); // Set spacing between nodes
    vbox3.setAlignment(Pos.CENTER);
    vbox3.setPadding(new Insets(20)); // Add padding around the VBox
    vbox3.getChildren().addAll(button3, closeButton);
    
    button1.setStyle("-fx-background-color: blue ; -fx-text-fill: white; -fx-font-size: 10pt;-fx-font-weight: 900");
    button2.setStyle("-fx-background-color: blue ; -fx-text-fill: white; -fx-font-size: 10pt;-fx-font-weight: 900");
    button3.setStyle("-fx-background-color: blue ; -fx-text-fill: white; -fx-font-size: 10pt;-fx-font-weight: 900");
    closeButton.setStyle("-fx-background-color: blue ; -fx-text-fill: white; -fx-font-size: 10pt;-fx-font-weight: 900");
    
    HBox hbox = new HBox(20, vbox2, vbox3);
    hbox.setAlignment(Pos.CENTER);

    VBox mainVbox = new VBox(20); // Set spacing between nodes
    mainVbox.setAlignment(Pos.TOP_CENTER);
    mainVbox.setPadding(new Insets(20)); // Add padding around the VBox
    mainVbox.getChildren().addAll(vbox1,imageV, hbox);

    Scene scene = new Scene(mainVbox, 500, 400); // Set preferred window size
    primaryStage.setScene(scene);
    primaryStage.setTitle("The DopplerEffect Project");
    primaryStage.show();
    strans.play();

    }   
    
  public void showDopplerCalcWindow(){
                
        final double MIN = 0.0, MAX = 100.0 , INITIAL = 0.0;
        final double MAJOR_TICK_UNIT = 20.0;
        final int MINOR_TICK_COUNT = 5;
        final double SLIDER_WIDTH = 300.0;
        final double LABEL_WIDTH = 50.0;
        final double SPACING = 10.0;
        
        Button calcButton = new Button("Calculate");
        ComboBox<String> cbox = new ComboBox();
        cbox.getItems().addAll("Observed Frequency","Actual Frequency","Observer Velocity","Source Velocity");
        cbox.getSelectionModel().selectFirst();
        
        Label ofDescriptor = new Label("Observed Frequency: ");
        Label vSoundDescriptor = new Label("Sound Velocity: ");
        Label afDescriptor = new Label("Actual Frequency: ");
        Label ovDescriptor = new Label("Observer Velocity: ");        
        Label svDescriptor = new Label("Source Velocity: ");
        
        TextField ofTextField = new TextField();
        ofTextField.setStyle("-fx-border-style: solid;" + "-fxalignment: center");
        ofTextField.setPrefWidth(LABEL_WIDTH);
     
        TextField afTextField = new TextField();
        afTextField.setStyle("-fx-border-style: solid;" + "-fxalignment: center");
        afTextField.setPrefWidth(LABEL_WIDTH);
        
        TextField svTextField = new TextField();
        svTextField.setStyle("-fx-border-style: solid;" + "-fxalignment: center");
        svTextField.setPrefWidth(LABEL_WIDTH);
        
        TextField ovTextField = new TextField();
        ovTextField.setStyle("-fx-border-style: solid;" + "-fxalignment: center");
        ovTextField.setPrefWidth(LABEL_WIDTH);
    
        TextField vSoundTextField = new TextField();
        vSoundTextField.setStyle("-fx-border-style: solid;" + "-fxalignment: center");
        vSoundTextField.setPrefWidth(LABEL_WIDTH);
        
        RadioButton ovRadio = new RadioButton();
        RadioButton svRadio = new RadioButton();
        RadioButton ofRadio = new RadioButton();
        RadioButton afRadio = new RadioButton();
        RadioButton vSoundRadio = new RadioButton();
        
        ToggleGroup radioGroup = new ToggleGroup();
        ovRadio.setToggleGroup(radioGroup);
        ofRadio.setToggleGroup(radioGroup);
        svRadio.setToggleGroup(radioGroup);
        afRadio.setToggleGroup(radioGroup);
        vSoundRadio.setToggleGroup(radioGroup);
        
        HBox ofHBox = new HBox(ofRadio,ofDescriptor, ofTextField);
        ofHBox.setAlignment(Pos.CENTER);
        HBox afHBox = new HBox(afRadio,afDescriptor,afTextField);
        afHBox.setAlignment(Pos.CENTER);
        HBox ovHBox = new HBox(ovRadio,ovDescriptor, ovTextField);
        ovHBox.setAlignment(Pos.CENTER);
        HBox svHBox = new HBox(svRadio,svDescriptor,svTextField);
        svHBox.setAlignment(Pos.CENTER);
        HBox vSoundHBox = new HBox(vSoundRadio,vSoundDescriptor, vSoundTextField);
        vSoundHBox.setAlignment(Pos.CENTER);
        
        Slider slider = new Slider(MIN, MAX, INITIAL);
        slider.setShowTickMarks(true);
        slider.setMajorTickUnit(MAJOR_TICK_UNIT);
        slider.setMinorTickCount(MINOR_TICK_COUNT);
        slider.setShowTickLabels(true);
        slider.setSnapToTicks(true);
        slider.setPrefWidth(SLIDER_WIDTH);
        


    BorderPane borderPane = new BorderPane();
    MenuBar menuBar = new MenuBar();
    Menu fileMenu = new Menu("File");
    MenuItem exitItem = new MenuItem("Exit");
    fileMenu.getItems().add(exitItem);

    exitItem.setOnAction(event -> {
        Stage stage = (Stage) borderPane.getScene().getWindow();
        stage.close();
    });
           menuBar.getMenus().addAll(fileMenu);
           borderPane.setTop(menuBar);
        
        calcButton.setOnAction(event -> {
           String choice = cbox.getValue();
           
           switch (choice){
            
            case "Observed Frequency":
                vSound = Double.parseDouble(vSoundTextField.getText());
                vSource = Double.parseDouble(svTextField.getText());
                vObserver = Double.parseDouble(ovTextField.getText());
                actualFrequency = Double.parseDouble(afTextField.getText());
                observedFrequency = actualFrequency * (vSound + vObserver)/(vSound + vSource);
                ofTextField.setText(String.format("%.1f", observedFrequency));
                break;
            
            case "Actual Frequency":
                vSound = Double.parseDouble(vSoundTextField.getText());
                vSource = Double.parseDouble(svTextField.getText());
                vObserver = Double.parseDouble(ovTextField.getText());
                observedFrequency = Double.parseDouble(ofTextField.getText());
                actualFrequency = observedFrequency *(vSound + vSource)/(vSound + vObserver);
                afTextField.setText(String.format("%.1f", actualFrequency));
                break;
            
            case "Source Velocity":
                vSound = Double.parseDouble(vSoundTextField.getText());
                actualFrequency  = Double.parseDouble(afTextField.getText());
                vObserver = Double.parseDouble(ovTextField.getText());
                observedFrequency = Double.parseDouble(ofTextField.getText());
                vSource = (actualFrequency *(vObserver + vSound)/observedFrequency)- vSound;
                svTextField.setText(String.format("%.1f", vSource));
                break;
            
            case "Observer Velocity":
                vSound = Double.parseDouble(vSoundTextField.getText());
                vSource = Double.parseDouble(svTextField.getText());
                actualFrequency = Double.parseDouble(afTextField.getText());
                observedFrequency = Double.parseDouble(ofTextField.getText());
                vObserver = (observedFrequency *(vSound + vSource)/actualFrequency)- vSource;
                ovTextField.setText(String.format("%.1f", vObserver));
                break;


        }
        });
        
            slider.valueProperty().addListener((observable, oldvalue, newvalue)->{
                if (radioGroup.getSelectedToggle() == ovRadio) {                    
                vObserver = slider.getValue();         
                ovTextField.setText(String.format("%.1f", vObserver));
            }
                else if (radioGroup.getSelectedToggle() == svRadio) {                    
                vSource = slider.getValue();         
                svTextField.setText(String.format("%.1f", vSource));
            }
                else if (radioGroup.getSelectedToggle() == afRadio) {                    
                actualFrequency = slider.getValue();         
                afTextField.setText(String.format("%.1f", actualFrequency));
            }
                else if (radioGroup.getSelectedToggle() == ofRadio) {                    
                observedFrequency = slider.getValue();         
                ofTextField.setText(String.format("%.1f", observedFrequency));
            }
                else if (radioGroup.getSelectedToggle() == vSoundRadio) {                    
                vSound = slider.getValue();         
                vSoundTextField.setText(String.format("%.1f", vSound));
            }

         });
        
        
        VBox mainVbox = new VBox(10, cbox,ofHBox, afHBox, ovHBox,svHBox, vSoundHBox, slider, calcButton);
        mainVbox.setAlignment(Pos.CENTER);
        mainVbox.setPadding(new Insets(SPACING));       
        
        
    borderPane.setCenter(mainVbox);
    Scene secondScene = new Scene(borderPane);
    Stage secondStage = new Stage();
    secondStage.setScene(secondScene);
    secondStage.setTitle("Calculator Page");
    secondStage.show();
    }
  public void showAnimationWindow() {
    final double WIDTH = 640.0, HEIGHT = 480.0;
    File videoFile = new File("dopplereffectvideo.mp4");
    Media media = new Media(videoFile.toURI().toString());
    MediaPlayer player = new MediaPlayer(media);
    player.setOnEndOfMedia(() -> {
        player.stop();
    });
    MediaView view = new MediaView(player);
    view.setFitWidth(WIDTH);
    view.setFitHeight(HEIGHT);
    Button playButton = new Button("Play");
    Button pauseButton = new Button("Pause");
    Button stopButton = new Button("Stop");

    playButton.setOnAction(event -> {
        player.play();
    });

    pauseButton.setOnAction(event -> {
        player.pause();
    });

    stopButton.setOnAction(event -> {
        player.stop();
    });

    HBox hbox = new HBox(10, playButton, pauseButton, stopButton);
    hbox.setAlignment(Pos.CENTER);
    hbox.setPadding(new Insets(10));

    BorderPane borderPane = new BorderPane();
    borderPane.setCenter(view);
    borderPane.setBottom(hbox);

    Stage stage = new Stage();
    stage.setTitle("Animation Page");
    Scene scene = new Scene(borderPane);
    stage.setScene(scene);
    stage.show();
}
  public void showInfoWindow() {
    final double SCENE_WIDTH = 800.0;
    final double SCENE_HEIGHT = 300.0;
    final double X1 = 30.0, Y1 = 100;
    final double X2 = 30.0, Y2 = 130.0;
    final double X3 = 30.0, Y3 = 150.0;
    final double FONT_SIZE = 38;
    final double SCALE_HALF = 0.30;
    final double SCALE_QTR = 0.25;

    Stage fourthStage = new Stage(); // Create a new stage for the fourth window

    Text text1 = new Text(X1, Y1, "Information");
    text1.setFont(new Font("SansSerif", FONT_SIZE));
    

    Text text2 = new Text(X2, Y2, "Our project offers an innovative JavaFX program designed to solve a fundamental problem in wave physics, which is calculating the velocity ");
    text2.setFont(new Font("SansSerif", FONT_SIZE));
    text2.setScaleX(SCALE_HALF);
    text2.setScaleY(SCALE_HALF);
    text2.setTranslateY(15); // Translate the second text by 30 units vertically
    
    Text text21 = new Text(X2, Y2, "or frequency of a wave when a source and/or observer is in motion, taking into account the Doppler effect.");
    text21.setFont(new Font("SansSerif", FONT_SIZE));
    text21.setScaleX(SCALE_HALF);
    text21.setScaleY(SCALE_HALF);
    text21.setTranslateY(-15); // Translate the second text by 30 units vertically
    
    String url = "https://www.youtube.com/watch?v=h4OnBYrbCjY&ab_channel=AltShiftX"; // Replace with your desired URL

    Hyperlink hyperlink = new Hyperlink("Visit Animation Source");
    hyperlink.setOnAction(e -> getHostServices().showDocument(url));
    
    
    Text text3 = new Text(X3, Y3, "Team Members : Ludovic Confais Courcy,Amine Ait Yakoub,Enrico Sombini");
    text3.setFont(new Font("SansSerif", FONT_SIZE));
    text3.setScaleX(SCALE_QTR);
    text3.setScaleY(SCALE_QTR);
    text3.setTranslateY(10); // Translate the third text by 60 units vertically
    text3.setStyle("-fx-font-weight: bold; -fx-font-style: italic; -fx-text-fill: RED;-fx-underline: true;");

    
    VBox vbox = new VBox(text1, text2, text21,hyperlink, text3); 
    vbox.setAlignment(Pos.CENTER);
    //Pane pane = new Pane(text1, text2, text3);
    Scene scene = new Scene(vbox, SCENE_WIDTH, SCENE_HEIGHT);

    fourthStage.setTitle("Information Page");
    fourthStage.setScene(scene);
    fourthStage.show();
}
  public void showCalcWindow() {
    final double SCENE_WIDTH = 800.0;
    final double SCENE_HEIGHT = 300.0;
  
     Stage fourthStage = new Stage();
     Label c = new Label("Choose your Calculator");
     Button sCalc =new Button("Sound velocity");
     Button uCalc =new Button("Unit Convertor");     
     Button fCalc =new Button("Doppler Effect");
     
     fCalc.setOnAction(event->showDopplerCalcWindow());
     sCalc.setOnAction(event->showSoundWindow());
     uCalc.setOnAction(event->showUnitWindow());
     VBox vbox = new VBox(10,c,sCalc,uCalc,fCalc);
     vbox.setAlignment(Pos.CENTER);
     vbox.setPadding(new Insets(10));
    
     Scene scene = new Scene(vbox);
    fourthStage.setTitle("Calculator Choice");
    fourthStage.setScene(scene);
    fourthStage.show();
  } 
  public void showSoundWindow() {
  
     Stage fourthStage = new Stage();
     final double SCENE_WIDTH = 1000.0, SCENE_HEIGHT = 600.0;        
        final double LABEL_WIDTH = 75.0;
        
        ComboBox<String> cbox = new ComboBox();
        cbox.getItems().addAll("Kelvins","Celsius","Fahrenheit");
        cbox.getSelectionModel().selectFirst();
        
        TextField temp = new TextField();
        temp.setStyle("-fx-border-style: solid;" + "-fxalignment: center");
        temp.setPrefWidth(LABEL_WIDTH);
        Label lTemp = new Label("Temperature: ");
        
        Label result = new Label("Press Enter to Calculate");
        
       temp.setOnAction((ActionEvent event) ->{
           if("Kelvins".equals(cbox.getValue())){
            temperature = Double.parseDouble(temp.getText()) ;
            vSound1 = 331 * Math.sqrt((1 + temperature)/273.15) ; 
            result.setText(String.format("%,.2f", vSound1) + " m/s");   
            }
           else if("Celsius".equals(cbox.getValue())){
            temperature = Double.parseDouble(temp.getText()) ;
            vSound1 = 331 * Math.sqrt((1 + temperature + 273.15)/273.15) ; 
            result.setText("Sound Velocity: " + String.format("%,.2f", vSound1) + " m/s");   
            }
           else if("Fahrenheit".equals(cbox.getValue())){
            temperature = Double.parseDouble(temp.getText()) ;
            vSound1 = 331 * Math.sqrt((1 + (((temperature - 32)*5/9) + 273.15))/273.15) ; 
            result.setText(String.format("%,.2f", vSound1) + " m/s");   
            }
        });
        
        HBox hbox = new HBox(lTemp, temp,cbox);
        hbox.setPadding(new Insets(10));
        hbox.setAlignment(Pos.CENTER);
        
        VBox vbox = new VBox(hbox,result);
        hbox.setPadding(new Insets(10));
        vbox.setAlignment(Pos.CENTER);
     
     
    
     Scene scene = new Scene(vbox);
    fourthStage.setTitle("Sound Velocity Calculator");
    fourthStage.setScene(scene);
    fourthStage.show();
  }
  public void showUnitWindow() {
  
     Stage fourthStage = new Stage();
     Label clabel = new Label("Choose Units to Convert");
        Label to2 = new Label("TO");
        Label to1 = new Label("TO");
        ComboBox<String> cbox = new ComboBox();
        cbox.getItems().addAll("Meters per Second", "Hertz");
        
        Button calcButton1 = new Button("Calculate");
        Button calcButton2 = new Button("Calculate");
        
        ComboBox<String> mbox1 = new ComboBox();
        mbox1.getItems().addAll("Meters per Second", "Kilometer per hour");
        mbox1.getSelectionModel().selectFirst();
        
        ComboBox<String> mbox2 = new ComboBox();
        mbox2.getItems().addAll("Kilometer per hour","Meters per Second");
        mbox2.getSelectionModel().selectFirst();
        
        ComboBox<String> rbox1 = new ComboBox();
        rbox1.getItems().addAll("Hertz","Mega Hertz" );
        rbox1.getSelectionModel().selectFirst();
        
        ComboBox<String> rbox2 = new ComboBox();
        rbox2.getItems().addAll("Mega Hertz", "Hertz");
        rbox2.getSelectionModel().selectFirst();
        
        TextField Tf1 = new TextField();
        TextField Tf2 = new TextField();
        TextField Tf3 = new TextField();
        TextField Tf4 = new TextField();
        
        HBox rhbox1 = new HBox(Tf1,rbox1);
        rhbox1.setAlignment(Pos.CENTER);
        HBox rhbox2 = new HBox(Tf2,rbox2);
        rhbox2.setAlignment(Pos.CENTER);
        
        VBox rvbox = new VBox(10,rhbox1,to1,rhbox2, calcButton1);
        rvbox.setAlignment(Pos.CENTER);
        rvbox.setPadding(new Insets(10));
        
        HBox mhbox1 = new HBox(Tf3,mbox1);
        mhbox1.setAlignment(Pos.CENTER);
        HBox mhbox2 = new HBox(Tf4,mbox2);
        mhbox2.setAlignment(Pos.CENTER);
        
        VBox mvbox = new VBox(10,mhbox1,to2,mhbox2,calcButton2);
        mvbox.setAlignment(Pos.CENTER);
        mvbox.setPadding(new Insets(10));
        
        
        VBox vbox = new VBox(10);
        VBox cvbox = new VBox(10);                
        cvbox.setAlignment(Pos.CENTER);
        cvbox.setPadding(new Insets(10));
        
        cbox.valueProperty().addListener((obs, oldItem, newItem)->{
            if(cbox.getValue() == "Meters per Second"){
            
                cvbox.getChildren().setAll(mvbox);
            }
            
            else if(cbox.getValue() == "Hertz"){
            
                cvbox.getChildren().setAll(rvbox);  
            }
        });
        
        calcButton1.setOnAction(event ->{
        String choice1 = rbox1.getValue();
        String choice2 = rbox2.getValue();
           
        if(choice1 == "Hertz" && choice2 == "Mega Hertz"){
            result = 1000000 *Double.parseDouble(Tf1.getText());
            
            Tf2.setText(String.format("%.1f", result));
        }
        else if(choice1 == "Mega Hertz" && choice2 == "Hertz"){
            
            result = Double.parseDouble(Tf1.getText())/ 1000000;
            
            Tf2.setText(String.format("%.6f", result));
        }
        else if(choice1 == "Hertz" && choice2 == "Hertz"){
            
            Tf2.setText(Tf1.getText());
        }
        else if(choice1 == "Mega Hertz" && choice2 == "Mega Hertz"){
                        
            Tf2.setText(Tf1.getText());
        }
           
        });
        
        calcButton2.setOnAction(event ->{
        
            String choice1 = mbox1.getValue();
            String choice2 = mbox2.getValue();
           
        if(choice1 == "Meters per Second" && choice2 == "Kilometer per hour"){
            result = 3.6 * Double.parseDouble(Tf3.getText());
            
            Tf4.setText(String.format("%.1f", result));
        }
        else if(choice1 == "Kilometer per hour" && choice2 == "Meters per Second"){
            
            result = Double.parseDouble(Tf3.getText())/ 3.6;
            
            Tf4.setText(String.format("%.1f", result));
        }
        else if(choice1 == "Meters per Second" && choice2 == "Meters per Second"){
            
            Tf4.setText(Tf3.getText());
        }
        else if(choice1 == "Kilometer per hour" && choice2 == "Kilometer per hour"){
                        
            Tf4.setText(Tf3.getText());
        }
        });
        
        vbox.getChildren().setAll(clabel,cbox,cvbox);
        vbox.setAlignment(Pos.CENTER);
        vbox.setPadding(new Insets(10));
      
     Scene scene = new Scene(vbox,400,300);
    fourthStage.setTitle("Unit Convertor");
    fourthStage.setScene(scene);
    fourthStage.show();
  }               
     
}
